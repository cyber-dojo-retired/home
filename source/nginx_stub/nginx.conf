
server
{
    listen 80;
    server_name  localhost;
    root /usr/share/nginx/html;

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    location /dojo/ { try_files $uri @home; }
    location /home/ { try_files $uri @home; }
    location @home
    {
      rewrite ^/dojo/(.*) /$1 break;
      rewrite ^/home/(.*) /$1 break;
      proxy_pass http://home-server:4527;
    }

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    location /avatars/ {
      rewrite ^/avatars/(.*) /$1 break;
      proxy_pass http://avatars:5027;
    }

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    location /creator/ {
      rewrite ^/creator/(.*) /$1 break;
      proxy_pass http://creator:4523;
    }

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # For everything else try web.

    location /  {
      # An HTTP header important enough to have its own Wikipedia entry:
      # http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # Help Rack set the proper protocol (eg https) for doing redirects:
      proxy_set_header X-Forwarded-Proto $scheme;

      # Pass the Host: header from the client right along so redirects
      # can be set properly within the Rack application
      proxy_set_header Host $http_host;

      # We don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;

      # Try to serve static files from nginx.
      if (!-f $request_filename) {
        proxy_pass http://home-server:3000;
        break;
      }
    }

}
